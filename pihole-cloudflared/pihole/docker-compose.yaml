services:
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
#    network_mode: "none"
    hostname: pihole

    networks:
      priv_lan:
        ipv4_address: 192.168.1.25 # Your chosen static IP for Pi-hole on your LAN
      internal:
        ipv4_address: 172.30.9.3 # Unique IP for Pi-hole on internal network

    environment:
      TZ: "America/New_York"
      WEBPASSWORD_FILE: "./pihole_password.txt"
      FTLCONF_dns_upstreams:  "172.30.9.2#5053;1.1.1.1;1.0.0.1"
      FTLCONF_dns_INTERFACE: eth0 # Pi-hole uses this as its LAN-facing interface inside the container

      # --- NEW / MODIFIED FOR DHCP ---
      # Enable DHCP server
      FTLCONF_dns_listeningMode: "all" # Ensure dnsmasq listens on all interfaces (including the macvlan)
      FTLCONF_dhcp_active: "true"
      # You need to define the DHCP range and router/gateway.
      # These should match your LAN network's characteristics.
      FTLCONF_dhcp_router: 192.168.1.1 # <--- Your Router's Gateway IP (usually the router itself)
      FTLCONF_dhcp_start: 192.168.1.100 # <--- Start of your DHCP range
      FTLCONF_dhcp_end: 192.168.1.250   # <--- End of your DHCP range
      # You can optionally set a domain name for your local network
      # DHCP_FQDN: "true"
      # DHCP_PT_ARPA: "true"
      # DHCP_MAX_LEASES: 50 # Max leases, adjust as needed

    volumes:
      - "./pihole/etc-pihole/:/etc/pihole/"
      - "./pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/"

    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "80:80/tcp"

    cap_add:
      - NET_ADMIN # This is CRUCIAL for DHCP to work, as it needs network administration capabilities

    restart: unless-stopped

    depends_on:
      - cloudflared

  cloudflared:
    container_name: cloudflared
    image: cloudflare/cloudflared:latest
    networks:
      internal:
        ipv4_address: 172.30.9.2
      default:
    command:
#["proxy", "--dns", "--metrics", "0.0.0.0:5053", "--no-autoupdate"]
#        ["proxy", "--dns", "metrics", "0.0.0.0:9090"] #tried after commenting out the parameters below
       # "proxy-dns --address 0.0.0.0:5053 --metrics 0.0.0.0:9090"
        - "proxy-dns"
        - "--address"
        - "0.0.0.0"
        - "--port"
        - "5053"
        #- --no-autoupdate
        - "--metrics"     #Optional: enable metrics
        - "0.0.0.0:9090"  #port metrics are exposed
    environment:
      TUNNEL_DNS_UPSTREAM: "https://1.1.1.1/dns-query,https://1.0.0.1/dns-query"
      #TUNNEL_DNS_PORT: "5053"
      #TUNNEL_DNS_ADDRESS: "0.0.0.0"
      NO_AUTOUPDATE: "true"
      TZ: "America/New_York"
    dns:
      - 1.1.1.1
      - 1.0.0.1
    restart: unless-stopped

# commented out for watchdog container
#    healthcheck:
#      test: ["CMD-SHELL", "echo 'google.com' | /usr/local/bin/cloudflared proxy-dns --port 5053 --upstream https://1.1.1.1/dns-query > /dev/null || exit 1"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 40s

  watchdog:
    container_name: watchdog
    image: docker:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./watchdog/watchdog.sh:/app/watchdog.sh
    command: ["sh", "/app/watchdog.sh"]
    restart: unless-stopped
    depends_on:
      - cloudflared

networks:
  priv_lan:
    external: true

  internal:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.30.9.0/29
          gateway: 172.30.9.1
          ip_range: 172.30.9.0/29
